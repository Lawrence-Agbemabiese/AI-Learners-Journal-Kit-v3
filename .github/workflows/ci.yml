name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI/CD - test edge cases only on Ubuntu
          - os: windows-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.10'
          - os: macos-latest
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Verify Python installation
      run: |
        python --version
        python -c "import sys; print('Python executable:', sys.executable)"

    - name: Test script syntax (Unix)
      if: runner.os != 'Windows'
      run: |
        # Test bash script syntax
        bash -n ai-journal
        
        # Test Python scripts syntax
        python -m py_compile scripts/entry_saver.py
        python -m py_compile scripts/auto_append.py
        
        # Check if AI integration script exists and test syntax if it does
        if [ -f scripts/ai_integration.py ]; then
          python -m py_compile scripts/ai_integration.py
        fi

    - name: Test script syntax (Windows)
      if: runner.os == 'Windows'
      run: |
        # Test Python scripts syntax
        python -m py_compile scripts/entry_saver.py
        python -m py_compile scripts/auto_append.py
        
        # Check if AI integration script exists and test syntax if it does
        if (Test-Path scripts/ai_integration.py) {
          python -m py_compile scripts/ai_integration.py
        }
      shell: powershell

    - name: Test installation process (Unix)
      if: runner.os != 'Windows'
      run: |
        # Create temporary directory for testing
        mkdir -p test-install
        cd test-install
        
        # Copy necessary files
        cp ../ai-journal .
        cp -r ../scripts .
        
        # Make ai-journal executable
        chmod +x ai-journal
        
        # Test basic functionality (dry run without actual installation)
        export JOURNAL_DIR="$PWD/test-journal"
        export SCRIPTS_DIR="$PWD/scripts"
        
        # Test help command
        ./ai-journal --help

    - name: Test installation process (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create temporary directory for testing
        New-Item -ItemType Directory -Force -Path test-install
        Set-Location test-install
        
        # Copy necessary files
        Copy-Item ../scripts . -Recurse
        
        # Test Python scripts can be executed
        $env:JOURNAL_DIR = "$PWD/test-journal"
        $env:SCRIPTS_DIR = "$PWD/scripts"
        
        # Test that scripts can be imported without errors
        python -c "import sys; sys.path.insert(0, 'scripts'); import entry_saver"
        python -c "import sys; sys.path.insert(0, 'scripts'); import auto_append"
      shell: powershell

    - name: Validate documentation
      run: |
        # Check that important files exist
        test -f README.md
        test -f LICENSE
        test -f docs/Quick_Start.md || echo "Warning: Quick_Start.md not found"
        
        # Check that README has required sections
        grep -q "Quick Start" README.md
        grep -q "Installation" README.md
        grep -q "Features" README.md
        grep -q "License" README.md

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort

    - name: Lint Python code with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings for now, but show them
        flake8 scripts/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check Python code formatting with black
      run: |
        black --check --diff scripts/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff scripts/

    - name: Validate shell script with shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: '.'
        format: gcc
        severity: warning
        ignore_paths: |
          .git
          .github
          demo
          docs
          visuals
          promo

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scanner
      run: |
        echo "=== Running Bandit Security Scan ==="
        # Run scan for medium and high severity issues only
        bandit -r scripts/ --severity-level medium -f json -o bandit-medium-high.json --exit-zero

        # Check results
        ISSUE_COUNT=$(python3 -c "
        import json
        try:
            with open('bandit-medium-high.json', 'r') as f:
                data = json.load(f)
            print(len(data['results']))
        except:
            print('0')
        ")

        echo "Medium/High severity issues found: $ISSUE_COUNT"

        if [ "$ISSUE_COUNT" -eq "0" ]; then
          echo "✅ No medium/high severity security issues found"
          echo "ℹ️ This project may have low-severity warnings which are acceptable"
        else
          echo "❌ Found $ISSUE_COUNT medium/high severity security issues!"
          bandit -r scripts/ --severity-level medium
          exit 1
        fi

    - name: Check for known security vulnerabilities
      run: |
        # Create a requirements.txt for safety check if it doesn't exist
        if [ ! -f requirements.txt ]; then
          echo "# No external dependencies - using standard library only" > requirements.txt
        fi
        safety check -r requirements.txt || echo "No dependencies to check"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: github.event_name == 'release'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create release artifacts
      run: |
        # Create a release archive
        tar -czf ai-learners-journal-kit-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git*' \
          --exclude='test-*' \
          --exclude='*.tar.gz' \
          .

    - name: Upload release artifacts
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ai-learners-journal-kit-${{ github.event.release.tag_name }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}